'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _https = require('./utils/https');

var _https2 = _interopRequireDefault(_https);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Wrap the Zomato API
 */
var Zomato = function () {

  /**
   * constructor - Constructs the api object
   *
   * @param {string} apiKey the user-key
   */
  function Zomato(apiKey) {
    _classCallCheck(this, Zomato);

    this.apiKey = apiKey;
    this.hostname = 'developers.zomato.com';
    this.apiVersion = '/api/v2.1';
  }

  /**
   * get - Forms the path before making an https request
   *
   * @param {string} endpoint The api endpoint
   * @param {string} querystring The querystring
   * @return {Promise} p Resolves with the https response
   */


  _createClass(Zomato, [{
    key: 'get',
    value: function get(endpoint, querystring) {
      var path = this.apiVersion + '/' + endpoint;
      if (querystring !== undefined) {
        path += '?' + querystring;
      }
      var headers = {
        'user-key': this.apiKey
      };
      return _https2.default.get(this.hostname, path, headers);
    }

    /**
     * categories - Get list of categories
     * @see {@link https://developers.zomato.com/documentation#!/common/categories}
     *
     * @return {Promise} p Resolves with the list of categories
     */

  }, {
    key: 'categories',
    value: function categories() {
      return this.get('categories').then(function (data) {
        return data.categories.map(function (o) {
          return o.categories;
        });
      });
    }

    /**
     * cities - Get city details
     * @see {@link https://developers.zomato.com/documentation#!/common/cities}
     *
     * @param {Object} params Parameters that will be sent
     * @return {Promise} p Resolves with the list of location suggestions
     */

  }, {
    key: 'cities',
    value: function cities(params) {
      return this.get('cities', _querystring2.default.stringify(params)).then(function (data) {
        return data.location_suggestions;
      });
    }

    /**
     * collections - Get Zomato collections in a city
     * @see {@link https://developers.zomato.com/documentation#!/common/collections}
     *
     * @param {Object} params Parameters that will be sent
     * @return {Promise} p Resolves with a list of Zomato restaurant collections
     */

  }, {
    key: 'collections',
    value: function collections(params) {
      return this.get('collections', _querystring2.default.stringify(params)).then(function (data) {
        return data.collections.map(function (o) {
          return o.collection;
        });
      });
    }

    /**
     * cuisines - Get a list of all cuisines of restaurants listed in a city
     * @see {@link https://developers.zomato.com/documentation#!/common/cuisines}
     *
     * @param {Object} params Parameters that will be sent
     * @return {Promise} p Resolves with a list of all cuisines of restaurants
     */

  }, {
    key: 'cuisines',
    value: function cuisines(params) {
      return this.get('cuisines', _querystring2.default.stringify(params)).then(function (data) {
        return data.cuisines.map(function (o) {
          return o.cuisine;
        });
      });
    }

    /**
     * establishments - Get list of restaurant types in a city
     * @see {@link https://developers.zomato.com/documentation#!/common/establishments}
     *
     * @param {Object} params Parameters that will be sent
     * @return {Promise} p Resolves with a list of all restaurant types
     */

  }, {
    key: 'establishments',
    value: function establishments(params) {
      return this.get('establishments', _querystring2.default.stringify(params)).then(function (data) {
        return data.establishments.map(function (o) {
          return o.establishment;
        });
      });
    }

    /**
     * geocode - Get location details based on coordinates
     * @see {@link https://developers.zomato.com/documentation#!/common/geocode}
     *
     * @param {Object} params Parameters that will be sent
     * @return {Promise} p Resolves with the location details
     */

  }, {
    key: 'geocode',
    value: function geocode(params) {
      return this.get('geocode', _querystring2.default.stringify(params));
    }

    /**
     * locations - Search for locations
     * @see {@link https://developers.zomato.com/documentation#!/location/locations}
     *
     * @param {Object} params Parameters that will be sent
     * @return {Promise} p Resolves with list of location suggestions
     */

  }, {
    key: 'locations',
    value: function locations(params) {
      return this.get('locations', _querystring2.default.stringify(params)).then(function (data) {
        return data.location_suggestions;
      });
    }

    /**
     * locationDetails - Get Zomato location details
     * @see {@link https://developers.zomato.com/documentation#!/location/location_details}
     *
     * @param {Object} params Parameters that will be sent
     * @return {Promise} p Resolves with the the location details
     */

  }, {
    key: 'locationDetails',
    value: function locationDetails(params) {
      return this.get('location_details', _querystring2.default.stringify(params));
    }

    /**
     * restaurant - Get restaurant details
     * @see {@link https://developers.zomato.com/documentation#!/restaurant/restaurant_0}
     *
     * @param {Object} params Parameters that will be sent
     * @return {Promise} p Resolves with the restaurant details
     */

  }, {
    key: 'restaurant',
    value: function restaurant(params) {
      return this.get('restaurant', _querystring2.default.stringify(params));
    }

    /**
     * dailymenu - Get daily menu of a restaurant
     * @see {@link https://developers.zomato.com/documentation#!/restaurant/restaurant}
     *
     * @param {Object} params Parameters that will be sent
     * @return {Promise} p Resolves with the list of daily menus
     */

  }, {
    key: 'dailymenu',
    value: function dailymenu(params) {
      return this.get('dailymenu', _querystring2.default.stringify(params)).then(function (data) {
        return data.daily_menus.map(function (o) {
          return o.daily_menu;
        });
      });
    }

    /**
     * reviews - Get restaurant reviews
     * @see {@link https://developers.zomato.com/documentation#!/restaurant/reviews}
     *
     * @param {Object} params Parameters that will be sent
     * @return {Promise} p Resolves with the list of reviews
     */

  }, {
    key: 'reviews',
    value: function reviews(params) {
      return this.get('reviews', _querystring2.default.stringify(params)).then(function (data) {
        var reviews = data.user_reviews.map(function (o) {
          return o.review;
        });
        data.user_reviews = reviews;
        return data;
      });
    }

    /**
     * search - Search for restaurants
     * @see {@link https://developers.zomato.com/documentation#!/restaurant/search}
     *
     * @param {Object} params Parameters that will be sent
     * @return {Promise} p Resolves with the list of restaurants
     */

  }, {
    key: 'search',
    value: function search(params) {
      return this.get('search', _querystring2.default.stringify(params)).then(function (data) {
        var restaurants = data.restaurants.map(function (o) {
          return o.restaurant;
        });
        data.restaurants = restaurants;
        return data;
      });
    }
  }]);

  return Zomato;
}();

exports.default = Zomato;
module.exports = exports['default'];